{"version":3,"sources":["service.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fetchGeekListXml","geeklistId","a","url","fetch","then","response","text","catch","error","console","convertXmlToJson","xml","parseStringPromise","result","buildSortedItems","geekListJson","geeklist","item","map","$","sort","b","objectname","localeCompare","buildImageTags","geekListItems","imageSize","imageid","join","buildGameListTags","objectid","id","generateText","filter","useStyles","makeStyles","root","display","margin","App","useState","geekListId","setGeekListId","setImageSize","generatedText","setGeneratedText","classes","onFormSubmit","event","preventDefault","geekListXml","message","className","href","onSubmit","TextField","label","variant","type","value","onChange","e","target","FormControl","component","FormLabel","RadioGroup","aria-label","name","FormControlLabel","control","Radio","Button","color","readOnly","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0750c4f6.chunk.js","sourcesContent":["import { parseStringPromise } from 'xml2js';\n\nexport const fetchGeekListXml = async (geeklistId: string) => {\n  const corsProxy = 'https://cors-anywhere.herokuapp.com/';\n  const url = `${corsProxy}https://www.boardgamegeek.com/xmlapi/geeklist/${geeklistId}`;\n  const response = await fetch(url)\n    .then(async (response: Response) => await response.text())\n    .catch(error => {\n      console.error(error);\n      return `An error occurred trying to get the GeekList with id: ${geeklistId}`;\n    });\n  \n  return response;\n};\n\nexport const convertXmlToJson = async (xml: string) =>\n  await parseStringPromise(xml)\n    .then(result => {\n      return result;\n    })\n    .catch(error => {\n      console.error({error});\n      return error;\n    });\n\ntype GeekListItem = {\n  id: string;\n  imageid: string;\n  objectid: string;\n  objectname: string;\n  objecttype: string;\n  postdate: string;\n  editdate: string;\n  subtype: string;\n  thumbs: string;\n  username: string;\n};\n\ntype GeekListJson = {\n  geeklist: {\n    item: {$: GeekListItem}[];\n  };\n};\n\nexport const buildSortedItems = (geekListJson: GeekListJson) => {\n  const items: GeekListItem[] = geekListJson.geeklist.item.map(item => item.$);\n  const sortedItems = items.sort((a, b) => a.objectname.localeCompare(b.objectname));\n  return sortedItems;\n}\n\nconst buildImageTags = (geekListItems: GeekListItem[], imageSize: string) => {\n  if (imageSize === 'hidden') {\n    return '';\n  }\n\n  const imageTags = geekListItems.map(item => `[imageid=${item.imageid} ${imageSize} inline]`);\n  return imageTags.join('');\n};\n\nconst buildGameListTags = (geekListItems: GeekListItem[]) => {\n  const gameListTags = geekListItems.map(item => `[b]${item.objectname}[/b] - ([thing=${item.objectid}]BGG[/thing]) ([listitem=${item.id}]Auction[/listitem])`);\n  return gameListTags.join('\\r\\n');\n};\n\nexport const generateText = (geeklistId: string, geekListItems: GeekListItem[], imageSize: string) => {\n  const generatedText: string[] = [\n    `Auction Link: [b][geeklist=${geeklistId}][/geeklist][/b]`,\n    buildImageTags(geekListItems, imageSize),\n    `[b]Index of Items[/b]`,\n    buildGameListTags(geekListItems),\n    `[b][COLOR=#009900]List Generated via [url=http://davidhorm.github.io/bgg-auction-ad]BGG Auction Ad[/url] tool (a free service)[/COLOR][/b]`\n  ];\n\n  return generatedText.filter(text => text).join('\\r\\n\\r\\n');\n}","import { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { fetchGeekListXml, convertXmlToJson, buildSortedItems, generateText } from './service';\n\nimport './App.css';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'block',\n    margin: '1em',\n  }\n});\n\nconst App = () => {\n  const [geekListId, setGeekListId] = useState('');\n\n  const [imageSize, setImageSize] = useState('small');\n  const onImageSizeChange = (event: React.ChangeEvent<HTMLInputElement>) => setImageSize(event.target.value);\n\n  const [generatedText, setGeneratedText] = useState('');\n\n  const classes = useStyles();\n\n  const onFormSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setGeneratedText('loading');\n    const geekListXml = await fetchGeekListXml(geekListId);\n    const geekListJson = await convertXmlToJson(geekListXml);\n    if (geekListJson && geekListJson.geeklist) {\n      const geekListItems = buildSortedItems(geekListJson);\n      const text = generateText(geekListId, geekListItems, imageSize);\n      setGeneratedText(text);\n    }\n    else if (geekListJson.message) {\n      setGeneratedText(geekListJson.message);\n    }\n    else {\n      setGeneratedText(geekListXml);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>BGG Auction Ad Generator</h1>\n      <div>\n        Do you have a GeekList Auction on <a href=\"https://www.boardgamegeek.com/\">BoardGameGeek</a>? Do you want to display a\n        gallery of the box art and links to your auction items? Use this tool to generate text to copy and paste into a BGG post.\n      </div>\n\n      <form onSubmit={onFormSubmit}>\n\n        <TextField\n          className={classes.root}\n          id=\"geeklist-id\"\n          label=\"GeekList ID\"\n          variant=\"outlined\"\n          type=\"number\"\n          value={geekListId}\n          onChange={e => setGeekListId(e.target.value)}\n        />\n\n        <FormControl component=\"fieldset\" className={classes.root}>\n          <FormLabel component=\"legend\">Image Size</FormLabel>\n          <RadioGroup aria-label=\"Image Size\" name=\"image-size\" value={imageSize} onChange={onImageSizeChange}>\n            <FormControlLabel value=\"small\" label=\"Small\" control={<Radio />} />\n            <FormControlLabel value=\"square\" label=\"Square\" control={<Radio />} />\n            <FormControlLabel value=\"micro\" label=\"Micro\" control={<Radio />} />\n            <FormControlLabel value=\"hidden\" label=\"Hidden\" control={<Radio />} />\n          </RadioGroup>\n        </FormControl>\n\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.root}>\n          Generate\n        </Button>\n\n      </form>\n\n      <h3>Generated Text</h3>\n      <textarea className=\"generated-text\" value={generatedText || ''} readOnly></textarea>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}