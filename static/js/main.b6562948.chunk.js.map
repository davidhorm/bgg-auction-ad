{"version":3,"sources":["services/fetch.service.ts","services/geeklist.service.ts","services/bgg-formatter.service.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fetchGeekListJson","geeklistId","a","bggGeeklistApi","url","fetch","then","response","text","xml","parseStringPromise","result","catch","error","console","getValueAfterSeparator","foundText","indexOf","split","trim","getStartingBid","formattedGeekListItemBody","filter","match","getSoftReserve","getBuyItNow","getGeekListItems","geekListJson","geeklist","item","map","body","toLowerCase","replaceAll","hasText","$","startingBid","softReserve","buyItNow","buildImageGalleryTags","geekListItems","imageSize","imageid","join","buildColumn","header","content","buildBoxArtColumn","hasBoxArt","buildGameColumn","boxArtLineBreaks","objectid","buildAuctionLinkColumn","id","buildStartingBidColumn","length","buildSoftReserveColumn","buildBuyItNowColumn","buildGameListTable","tableColumns","generateText","listSortedByName","sort","b","objectname","localeCompare","useStyles","makeStyles","root","display","margin","App","useState","geekListId","setGeekListId","setImageSize","generatedText","setGeneratedText","classes","onFormSubmit","event","preventDefault","message","imageRadioLabel","className","href","onSubmit","TextField","label","variant","type","value","onChange","e","target","FormControl","component","FormLabel","RadioGroup","aria-label","name","FormControlLabel","control","Radio","Button","color","readOnly","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6562948.chunk.js","sourcesContent":["import { parseStringPromise } from 'xml2js';\r\n\r\n/**\r\n * Fetch GeekList by GeekList ID.\r\n */\r\nexport const fetchGeekListJson = async (geeklistId: string) => {\r\n  const corsProxy = 'https://bgg-auction-ad.davidhorm.workers.dev/';\r\n  const bggGeeklistApi = `xmlapi/geeklist/${geeklistId}`;\r\n  const url = `${corsProxy}${bggGeeklistApi}`;\r\n  const response = await fetch(url)\r\n    .then(async (response: Response) => await response.text())\r\n    .then(async (xml: string) => await parseStringPromise(xml))\r\n    .then(result => result)\r\n    .catch(error => {\r\n      console.error(error);\r\n      return `An error occurred trying to get the GeekList with id: ${geeklistId}`;\r\n    });\r\n  \r\n  return response;\r\n};\r\n","type GeekListItemAttr = {\r\n  id: string;\r\n  imageid: string;\r\n  objectid: string;\r\n  objectname: string;\r\n  objecttype: string;\r\n  postdate: string;\r\n  editdate: string;\r\n  subtype: string;\r\n  thumbs: string;\r\n  username: string;\r\n};\r\n\r\ntype AuctionValues = {\r\n  startingBid: string;\r\n  softReserve: string;\r\n  buyItNow: string;\r\n};\r\n\r\nexport type GeekListItem = GeekListItemAttr & AuctionValues;\r\n\r\ntype GeekListJson = {\r\n  geeklist: {\r\n    item: {\r\n      $: GeekListItemAttr;\r\n      body: string[];\r\n    }[];\r\n  };\r\n};\r\n\r\nconst formatGeekListItemBody = (body: string[]): string[] => {\r\n  if (!body || !body[0]) {\r\n    return [];\r\n  }\r\n\r\n  // Will match with: [b], [/b], [color=red], [color=#f6f6f6], [-], [/-]\r\n  const bggFormattingRegex = /(\\[\\/?\\w+(=#?\\w+)?])|(\\[\\/?-])/gi;\r\n\r\n  return body[0]\r\n          .toLowerCase()\r\n          .replaceAll(bggFormattingRegex, '')\r\n          .split('\\n')\r\n          .filter(hasText => hasText.trim());\r\n};\r\n\r\nconst getValueAfterSeparator = (foundText: string[]): string => {\r\n  const semicolon_separator = ': ';\r\n  if (foundText[0] && foundText[0].indexOf(semicolon_separator) >= 0) {\r\n    return foundText[0].split(semicolon_separator)[1].trim();\r\n  }\r\n\r\n  const dash_separator = ' - ';\r\n  if (foundText[0] && foundText[0].indexOf(dash_separator) >= 0) {\r\n    return foundText[0].split(dash_separator)[1].trim();\r\n  }\r\n\r\n  return '';\r\n};\r\n\r\nconst getStartingBid = (formattedGeekListItemBody: string[]): string => {\r\n  const foundText = formattedGeekListItemBody.filter(text => text.match(/^(starting bid)|(sb)|(opening bid)|(min bid)|(minimum bid)/i));\r\n  return getValueAfterSeparator(foundText);\r\n};\r\n\r\nconst getSoftReserve = (formattedGeekListItemBody: string[]): string => {\r\n  const foundText = formattedGeekListItemBody.filter(text => text.match(/^(soft reserve)|(sr)|(hard reserve)/i));\r\n  return getValueAfterSeparator(foundText);\r\n};\r\n\r\nconst getBuyItNow = (formattedGeekListItemBody: string[]): string => {\r\n  const foundText = formattedGeekListItemBody.filter(text => text.match(/^(buy it now)|(bin)/i));\r\n  return getValueAfterSeparator(foundText);\r\n};\r\n\r\nexport const getGeekListItems = (geekListJson: GeekListJson) => {\r\n  const items: GeekListItem[] = geekListJson.geeklist.item.map(item => {\r\n    const formattedGeekListItemBody = formatGeekListItemBody(item.body);\r\n    return {\r\n      ...(item.$),\r\n      startingBid: getStartingBid(formattedGeekListItemBody),\r\n      softReserve: getSoftReserve(formattedGeekListItemBody),\r\n      buyItNow: getBuyItNow(formattedGeekListItemBody),\r\n    };\r\n  });\r\n\r\n  return items;\r\n}\r\n","import { GeekListItem } from \"./geeklist.service\";\r\n\r\nconst buildImageGalleryTags = (geekListItems: GeekListItem[], imageSize: string) => {\r\n  if (imageSize === 'hidden' || imageSize === 'table') {\r\n    return '';\r\n  }\r\n\r\n  const imageTags = geekListItems.map(item => `[imageid=${item.imageid} ${imageSize} inline]`);\r\n  return imageTags.join('');\r\n};\r\n\r\nconst buildColumn = (header: string, content: string): string => `[floatleft][u][b]${header}[/b][/u]\\r\\n${content}[/floatleft]`;\r\n\r\nconst buildBoxArtColumn = (geekListItems: GeekListItem[], hasBoxArt: boolean): string => {\r\n  if (hasBoxArt) {\r\n    const content = geekListItems.map(item => `[imageid=${item.imageid} square]`).join('');\r\n    return buildColumn('Box Art', content);  \r\n  }\r\n  \r\n  return '';\r\n};\r\n\r\nconst buildGameColumn = (geekListItems: GeekListItem[], hasBoxArt: boolean): string => {\r\n  const boxArtLineBreaks = hasBoxArt ? '\\r\\n' : '';\r\n  const content = geekListItems.map(item => `${boxArtLineBreaks}[thing=${item.objectid}][/thing]${boxArtLineBreaks}`).join('\\r\\n');\r\n  return buildColumn('Game (BGG Link)', content);\r\n};\r\n\r\nconst buildAuctionLinkColumn = (geekListItems: GeekListItem[], hasBoxArt: boolean): string => {\r\n  const boxArtLineBreaks = hasBoxArt ? '\\r\\n' : '';\r\n  const content = geekListItems.map(item => `${boxArtLineBreaks}[listitem=${item.id}]Auction[/listitem]${boxArtLineBreaks}`).join('\\r\\n');\r\n  return buildColumn('Auction', content);\r\n};\r\n\r\nconst emptyAuctionValue = '-';\r\n\r\nconst buildStartingBidColumn = (geekListItems: GeekListItem[], hasBoxArt: boolean): string => {\r\n  const boxArtLineBreaks = hasBoxArt ? '\\r\\n' : '';\r\n  const hasStartingBids = geekListItems.filter(item => item.startingBid).length > 0;\r\n  \r\n  if (hasStartingBids) {\r\n    const content = geekListItems.map(item => `${boxArtLineBreaks}${item.startingBid || emptyAuctionValue}${boxArtLineBreaks}`).join('\\r\\n');\r\n    return buildColumn('SB', content);\r\n  }\r\n\r\n  return '';\r\n};\r\n\r\nconst buildSoftReserveColumn = (geekListItems: GeekListItem[], hasBoxArt: boolean): string => {\r\n  const boxArtLineBreaks = hasBoxArt ? '\\r\\n' : '';\r\n  const hasStartingBids = geekListItems.filter(item => item.softReserve).length > 0;\r\n  \r\n  if (hasStartingBids) {\r\n    const content = geekListItems.map(item => `${boxArtLineBreaks}${item.softReserve || emptyAuctionValue}${boxArtLineBreaks}`).join('\\r\\n');\r\n    return buildColumn('SR', content);\r\n  }\r\n\r\n  return '';\r\n};\r\n\r\nconst buildBuyItNowColumn = (geekListItems: GeekListItem[], hasBoxArt: boolean): string => {\r\n  const boxArtLineBreaks = hasBoxArt ? '\\r\\n' : '';\r\n  const hasStartingBids = geekListItems.filter(item => item.buyItNow).length > 0;\r\n  \r\n  if (hasStartingBids) {\r\n    const content = geekListItems.map(item => `${boxArtLineBreaks}${item.buyItNow || emptyAuctionValue}${boxArtLineBreaks}`).join('\\r\\n');\r\n    return buildColumn('BIN', content);\r\n  }\r\n\r\n  return '';\r\n};\r\n\r\nconst buildGameListTable = (geekListItems: GeekListItem[], imageSize: string): string => {\r\n  const hasBoxArt = imageSize === 'table';\r\n\r\n  const tableColumns = [\r\n    buildBoxArtColumn(geekListItems, hasBoxArt),\r\n    buildGameColumn(geekListItems, hasBoxArt),\r\n    buildAuctionLinkColumn(geekListItems, hasBoxArt),\r\n    buildStartingBidColumn(geekListItems, hasBoxArt),\r\n    buildSoftReserveColumn(geekListItems, hasBoxArt),\r\n    buildBuyItNowColumn(geekListItems, hasBoxArt),\r\n  ];\r\n\r\n  return `[size=12][floatleft]${tableColumns.join('')}[/floatleft][/size][clear]`;\r\n};\r\n\r\nexport const generateText = (geeklistId: string, geekListItems: GeekListItem[], imageSize: string) => {\r\n  const listSortedByName = geekListItems.sort((a, b) => a.objectname.localeCompare(b.objectname));\r\n\r\n  const generatedText: string[] = [\r\n    `Auction Link: [b][geeklist=${geeklistId}][/geeklist][/b]`,\r\n    buildImageGalleryTags(listSortedByName, imageSize),\r\n    buildGameListTable(listSortedByName, imageSize),\r\n    `[b][COLOR=#009900]List Generated via [url=http://davidhorm.github.io/bgg-auction-ad]BGG Auction Ad[/url] tool (a free service)[/COLOR][/b]`\r\n  ];\r\n\r\n  return generatedText.filter(text => text).join('\\r\\n\\r\\n');\r\n};","import { useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { fetchGeekListJson } from './services/fetch.service';\r\nimport { getGeekListItems } from './services/geeklist.service';\r\nimport { generateText } from './services/bgg-formatter.service';\r\n\r\nimport './App.css';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: 'block',\r\n    margin: '1em',\r\n  }\r\n});\r\n\r\nconst App = () => {\r\n  const [geekListId, setGeekListId] = useState('');\r\n\r\n  const [imageSize, setImageSize] = useState('table');\r\n  const onImageSizeChange = (event: React.ChangeEvent<HTMLInputElement>) => setImageSize(event.target.value);\r\n\r\n  const [generatedText, setGeneratedText] = useState('');\r\n\r\n  const classes = useStyles();\r\n\r\n  const onFormSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setGeneratedText('loading');\r\n    const geekListJson = await fetchGeekListJson(geekListId);\r\n\r\n    if (geekListJson && geekListJson.geeklist) {\r\n      const geekListItems = getGeekListItems(geekListJson);\r\n      const text = generateText(geekListId, geekListItems, imageSize);\r\n      setGeneratedText(text);\r\n    }\r\n    else if (geekListJson.message) {\r\n      setGeneratedText(geekListJson.message);\r\n    }\r\n    else {\r\n      setGeneratedText(geekListJson);\r\n    }\r\n  };\r\n\r\n  const imageRadioLabel = 'Image Size (and Location)';\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>BGG Auction Ad Generator</h1>\r\n      <div>\r\n        Do you have a GeekList Auction on <a href=\"https://www.boardgamegeek.com/\">BoardGameGeek</a>? Do you want to display a\r\n        gallery of the box art and links to your auction items? Use this tool to generate text to copy and paste into a BGG post.\r\n      </div>\r\n\r\n      <form onSubmit={onFormSubmit}>\r\n\r\n        <TextField\r\n          className={classes.root}\r\n          id=\"geeklist-id\"\r\n          label=\"GeekList ID\"\r\n          variant=\"outlined\"\r\n          type=\"number\"\r\n          value={geekListId}\r\n          onChange={e => setGeekListId(e.target.value)}\r\n        />\r\n\r\n        <FormControl component=\"fieldset\" className={classes.root}>\r\n          <FormLabel component=\"legend\">{imageRadioLabel}</FormLabel>\r\n          <RadioGroup aria-label={imageRadioLabel} name=\"image-size-location\" value={imageSize} onChange={onImageSizeChange}>\r\n            <FormControlLabel value=\"table\" label=\"Square (Table)\" control={<Radio />} />\r\n            <FormControlLabel value=\"small\" label=\"Small (Gallery)\" control={<Radio />} />\r\n            <FormControlLabel value=\"square\" label=\"Square  (Gallery)\" control={<Radio />} />\r\n            <FormControlLabel value=\"micro\" label=\"Micro  (Gallery)\" control={<Radio />} />\r\n            <FormControlLabel value=\"hidden\" label=\"None\" control={<Radio />} />\r\n          </RadioGroup>\r\n        </FormControl>\r\n\r\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.root}>\r\n          Generate\r\n        </Button>\r\n\r\n      </form>\r\n\r\n      <h3>Generated Text</h3>\r\n      <textarea className=\"generated-text\" value={generatedText || ''} readOnly></textarea>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}